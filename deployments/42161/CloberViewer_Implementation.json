{
  "address": "0xbC57E87c0BB28E8c6378a38bf29126511d0F0F1B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factoryV1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cachedChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "v1PoolCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "fromPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toPrice",
          "type": "uint256"
        }
      ],
      "name": "getDepthsByPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CloberViewer.DepthInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBid",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "fromIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "toIndex",
          "type": "uint16"
        }
      ],
      "name": "getDepthsByPriceIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CloberViewer.DepthInfo[]",
          "name": "depths",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPriceIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceUpperBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x45d32d375498d047e902a9b91da107f44cc322342f42518f45fcf15cbcedf8a8",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0xbC57E87c0BB28E8c6378a38bf29126511d0F0F1B",
    "transactionIndex": 5,
    "gasUsed": "7443429",
    "logsBloom": "0x
    "blockHash": "0x6f3eb5dd7702106957cb5c5e4cb60db8c6ca83052a1d2dcbf672c1de8de06ffd",
    "transactionHash": "0x45d32d375498d047e902a9b91da107f44cc322342f42518f45fcf15cbcedf8a8",
    "logs": [],
    "blockNumber": 105443390,
    "cumulativeGasUsed": "9589218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x24aC0938C010Fb520F1068e96d78E0458855111D",
    "0x93A43391978BFC0bc708d5f55b0Abe7A9ede1B91",
    42161,
    13
  ],
  "numDeployments": 1,
  "solcInputHash": "b5beff63fd1f338625e18efa1591aec6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryV1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cachedChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v1PoolCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fromPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPrice\",\"type\":\"uint256\"}],\"name\":\"getDepthsByPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberViewer.DepthInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"fromIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"toIndex\",\"type\":\"uint16\"}],\"name\":\"getDepthsByPriceIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberViewer.DepthInfo[]\",\"name\":\"depths\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceUpperBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CloberViewer.sol\":\"CloberViewer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CloberViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/CloberMarketFactory.sol\\\";\\nimport \\\"./interfaces/CloberMarketFactoryV1.sol\\\";\\nimport \\\"./interfaces/CloberOrderBook.sol\\\";\\nimport \\\"./interfaces/CloberPriceBook.sol\\\";\\nimport \\\"./interfaces/CloberOrderNFT.sol\\\";\\nimport \\\"./interfaces/CloberOrderNFTDeployer.sol\\\";\\nimport \\\"./PriceBook.sol\\\";\\n\\ncontract CloberViewer is PriceBook {\\n    struct DepthInfo {\\n        uint256 price;\\n        uint256 priceIndex;\\n        uint256 quoteAmount;\\n        uint256 baseAmount;\\n    }\\n\\n    CloberMarketFactory private immutable _factory;\\n    CloberMarketFactoryV1 private immutable _factoryV1;\\n    CloberOrderNFTDeployer private immutable _orderNFTDeployer;\\n    uint256 private immutable _cachedChainId;\\n    uint256 private immutable _v1PoolCount;\\n\\n    uint128 private constant VOLATILE_A = 10000000000;\\n    uint128 private constant VOLATILE_R = 1001000000000000000;\\n\\n    constructor(\\n        address factory,\\n        address factoryV1,\\n        uint256 cachedChainId,\\n        uint256 v1PoolCount\\n    ) PriceBook(VOLATILE_A, VOLATILE_R) {\\n        _factory = CloberMarketFactory(factory);\\n        _factoryV1 = CloberMarketFactoryV1(factoryV1);\\n        _orderNFTDeployer = CloberOrderNFTDeployer(_factory.orderTokenDeployer());\\n        _cachedChainId = cachedChainId;\\n        _v1PoolCount = v1PoolCount;\\n    }\\n\\n    function getAllMarkets() external view returns (address[] memory markets) {\\n        uint256 length = _factory.nonce() + _v1PoolCount;\\n\\n        markets = new address[](length);\\n        unchecked {\\n            for (uint256 i = 0; i < _v1PoolCount; ++i) {\\n                markets[i] = CloberOrderNFT(_factoryV1.computeTokenAddress(i)).market();\\n            }\\n\\n            for (uint256 i = _v1PoolCount; i < length; ++i) {\\n                bytes32 salt = keccak256(abi.encode(_cachedChainId, i - _v1PoolCount));\\n                markets[i] = CloberOrderNFT(_orderNFTDeployer.computeTokenAddress(salt)).market();\\n            }\\n        }\\n    }\\n\\n    function getDepthsByPriceIndex(\\n        address market,\\n        bool isBid,\\n        uint16 fromIndex,\\n        uint16 toIndex\\n    ) public view returns (DepthInfo[] memory depths) {\\n        depths = new DepthInfo[](toIndex - fromIndex + 1);\\n\\n        unchecked {\\n            for (uint16 index = fromIndex; index <= toIndex; ++index) {\\n                uint256 i = index - fromIndex;\\n                uint64 rawAmount = CloberOrderBook(market).getDepth(isBid, index);\\n                depths[i].price = CloberOrderBook(market).indexToPrice(index);\\n                depths[i].priceIndex = index;\\n                depths[i].quoteAmount = CloberOrderBook(market).rawToQuote(rawAmount);\\n                depths[i].baseAmount = CloberOrderBook(market).rawToBase(rawAmount, index, false);\\n            }\\n        }\\n    }\\n\\n    function getDepthsByPrice(\\n        address market,\\n        bool isBid,\\n        uint256 fromPrice,\\n        uint256 toPrice\\n    ) external view returns (DepthInfo[] memory) {\\n        uint16 fromIndex;\\n        uint16 toIndex;\\n        CloberMarketFactoryV1.MarketInfo memory marketInfo = _factoryV1.getMarketInfo(market);\\n        if (marketInfo.marketType == CloberMarketFactoryV1.MarketType.NONE) {\\n            (fromIndex, ) = CloberOrderBook(market).priceToIndex(fromPrice, true);\\n            (toIndex, ) = CloberOrderBook(market).priceToIndex(toPrice, false);\\n        } else if (marketInfo.marketType == CloberMarketFactoryV1.MarketType.VOLATILE) {\\n            require((marketInfo.a == VOLATILE_A) && (marketInfo.factor == VOLATILE_R));\\n            fromIndex = _volatilePriceToIndex(fromPrice, true);\\n            toIndex = _volatilePriceToIndex(toPrice, false);\\n        } else {\\n            fromIndex = _stablePriceToIndex(marketInfo.a, marketInfo.factor, fromPrice, true);\\n            toIndex = _stablePriceToIndex(marketInfo.a, marketInfo.factor, toPrice, false);\\n        }\\n\\n        return getDepthsByPriceIndex(market, isBid, fromIndex, toIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x3b6fc9eff02c6bece165b6329b0e92036dcf7b70038306a9eb280c8fe5305e57\",\"license\":\"MIT\"},\"contracts/PriceBook.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\ncontract PriceBook {\\n    uint256 private immutable _a;\\n    uint256 private immutable _r0;\\n    uint256 private immutable _r1;\\n    uint256 private immutable _r2;\\n    uint256 private immutable _r3;\\n    uint256 private immutable _r4;\\n    uint256 private immutable _r5;\\n    uint256 private immutable _r6;\\n    uint256 private immutable _r7;\\n    uint256 private immutable _r8;\\n    uint256 private immutable _r9;\\n    uint256 private immutable _r10;\\n    uint256 private immutable _r11;\\n    uint256 private immutable _r12;\\n    uint256 private immutable _r13;\\n    uint256 private immutable _r14;\\n    uint256 private immutable _r15;\\n    uint256 private immutable _r16;\\n\\n    uint16 public immutable maxPriceIndex;\\n    uint256 public immutable priceUpperBound;\\n\\n    constructor(uint128 a_, uint128 r_) {\\n        uint256 castedR = uint256(r_);\\n        _a = a_;\\n        // precision of `_r0~16` is 2^64\\n        _r0 = (castedR << 64) / 10**18;\\n        // when `r_` <= 1\\n        if ((a_ * _r0) >> 64 <= a_) {\\n            revert(\\\"INVALID_COEFFICIENTS\\\");\\n        }\\n        uint16 maxIndex_;\\n        uint256 maxPrice_ = 1 << 64;\\n\\n        uint256 r;\\n        if (_r0 < type(uint256).max / _r0) {\\n            r = (_r0 * _r0) >> 64;\\n            maxIndex_ = maxIndex_ | 0x1;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r1 = r;\\n\\n        if (_r1 < type(uint256).max / _r1) {\\n            r = (_r1 * _r1) >> 64;\\n            maxIndex_ = maxIndex_ | 0x2;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r2 = r;\\n\\n        if (_r2 < type(uint256).max / _r2) {\\n            r = (_r2 * _r2) >> 64;\\n            maxIndex_ = maxIndex_ | 0x4;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r3 = r;\\n\\n        if (_r3 < type(uint256).max / _r3) {\\n            r = (_r3 * _r3) >> 64;\\n            maxIndex_ = maxIndex_ | 0x8;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r4 = r;\\n\\n        if (_r4 < type(uint256).max / _r4) {\\n            r = (_r4 * _r4) >> 64;\\n            maxIndex_ = maxIndex_ | 0x10;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r5 = r;\\n\\n        if (_r5 < type(uint256).max / _r5) {\\n            r = (_r5 * _r5) >> 64;\\n            maxIndex_ = maxIndex_ | 0x20;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r6 = r;\\n\\n        if (_r6 < type(uint256).max / _r6) {\\n            r = (_r6 * _r6) >> 64;\\n            maxIndex_ = maxIndex_ | 0x40;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r7 = r;\\n\\n        if (_r7 < type(uint256).max / _r7) {\\n            r = (_r7 * _r7) >> 64;\\n            maxIndex_ = maxIndex_ | 0x80;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r8 = r;\\n\\n        if (_r8 < type(uint256).max / _r8) {\\n            r = (_r8 * _r8) >> 64;\\n            maxIndex_ = maxIndex_ | 0x100;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r9 = r;\\n\\n        if (_r9 < type(uint256).max / _r9) {\\n            r = (_r9 * _r9) >> 64;\\n            maxIndex_ = maxIndex_ | 0x200;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r10 = r;\\n\\n        if (_r10 < type(uint256).max / _r10) {\\n            r = (_r10 * _r10) >> 64;\\n            maxIndex_ = maxIndex_ | 0x400;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r11 = r;\\n\\n        if (_r11 < type(uint256).max / _r11) {\\n            r = (_r11 * _r11) >> 64;\\n            maxIndex_ = maxIndex_ | 0x800;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r12 = r;\\n\\n        if (_r12 < type(uint256).max / _r12) {\\n            r = (_r12 * _r12) >> 64;\\n            maxIndex_ = maxIndex_ | 0x1000;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r13 = r;\\n\\n        if (_r13 < type(uint256).max / _r13) {\\n            r = (_r13 * _r13) >> 64;\\n            maxIndex_ = maxIndex_ | 0x2000;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r14 = r;\\n\\n        if (_r14 < type(uint256).max / _r14) {\\n            r = (_r14 * _r14) >> 64;\\n            maxIndex_ = maxIndex_ | 0x4000;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r15 = r;\\n\\n        if (_r15 < type(uint256).max / _r15) {\\n            r = (_r15 * _r15) >> 64;\\n            maxIndex_ = maxIndex_ | 0x8000;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r16 = r;\\n\\n        maxPriceIndex = maxIndex_;\\n        priceUpperBound = (maxPrice_ >> 64) * a_ + (((maxPrice_ & 0xffffffffffffffff) * a_) >> 64);\\n    }\\n\\n    function _volatilePriceToIndex(uint256 price, bool roundingUp) internal view returns (uint16 index) {\\n        if (price < _a || price >= priceUpperBound) {\\n            revert(\\\"INVALID_PRICE\\\");\\n        }\\n        index = 0;\\n        uint256 _correctedPrice = _a;\\n        uint256 shiftedPrice = (price + 1) << 64;\\n\\n        unchecked {\\n            if (maxPriceIndex > 0x8000 && shiftedPrice > _r15 * _correctedPrice) {\\n                index = index | 0x8000;\\n                _correctedPrice = (_correctedPrice * _r15) >> 64;\\n            }\\n            if (maxPriceIndex > 0x4000 && shiftedPrice > _r14 * _correctedPrice) {\\n                index = index | 0x4000;\\n                _correctedPrice = (_correctedPrice * _r14) >> 64;\\n            }\\n            if (maxPriceIndex > 0x2000 && shiftedPrice > _r13 * _correctedPrice) {\\n                index = index | 0x2000;\\n                _correctedPrice = (_correctedPrice * _r13) >> 64;\\n            }\\n            if (maxPriceIndex > 0x1000 && shiftedPrice > _r12 * _correctedPrice) {\\n                index = index | 0x1000;\\n                _correctedPrice = (_correctedPrice * _r12) >> 64;\\n            }\\n            if (maxPriceIndex > 0x800 && shiftedPrice > _r11 * _correctedPrice) {\\n                index = index | 0x0800;\\n                _correctedPrice = (_correctedPrice * _r11) >> 64;\\n            }\\n            if (maxPriceIndex > 0x400 && shiftedPrice > _r10 * _correctedPrice) {\\n                index = index | 0x0400;\\n                _correctedPrice = (_correctedPrice * _r10) >> 64;\\n            }\\n            if (maxPriceIndex > 0x200 && shiftedPrice > _r9 * _correctedPrice) {\\n                index = index | 0x0200;\\n                _correctedPrice = (_correctedPrice * _r9) >> 64;\\n            }\\n            if (maxPriceIndex > 0x100 && shiftedPrice > _r8 * _correctedPrice) {\\n                index = index | 0x0100;\\n                _correctedPrice = (_correctedPrice * _r8) >> 64;\\n            }\\n            if (maxPriceIndex > 0x80 && shiftedPrice > _r7 * _correctedPrice) {\\n                index = index | 0x0080;\\n                _correctedPrice = (_correctedPrice * _r7) >> 64;\\n            }\\n            if (maxPriceIndex > 0x40 && shiftedPrice > _r6 * _correctedPrice) {\\n                index = index | 0x0040;\\n                _correctedPrice = (_correctedPrice * _r6) >> 64;\\n            }\\n            if (maxPriceIndex > 0x20 && shiftedPrice > _r5 * _correctedPrice) {\\n                index = index | 0x0020;\\n                _correctedPrice = (_correctedPrice * _r5) >> 64;\\n            }\\n            if (maxPriceIndex > 0x10 && shiftedPrice > _r4 * _correctedPrice) {\\n                index = index | 0x0010;\\n                _correctedPrice = (_correctedPrice * _r4) >> 64;\\n            }\\n            if (maxPriceIndex > 0x8 && shiftedPrice > _r3 * _correctedPrice) {\\n                index = index | 0x0008;\\n                _correctedPrice = (_correctedPrice * _r3) >> 64;\\n            }\\n            if (maxPriceIndex > 0x4 && shiftedPrice > _r2 * _correctedPrice) {\\n                index = index | 0x0004;\\n                _correctedPrice = (_correctedPrice * _r2) >> 64;\\n            }\\n            if (maxPriceIndex > 0x2 && shiftedPrice > _r1 * _correctedPrice) {\\n                index = index | 0x0002;\\n                _correctedPrice = (_correctedPrice * _r1) >> 64;\\n            }\\n            if (shiftedPrice > _r0 * _correctedPrice) {\\n                index = index | 0x0001;\\n                _correctedPrice = (_correctedPrice * _r0) >> 64;\\n            }\\n        }\\n        if (roundingUp && _correctedPrice < price) {\\n            unchecked {\\n                if (index >= maxPriceIndex) {\\n                    revert(\\\"INVALID_PRICE\\\");\\n                }\\n                index += 1;\\n            }\\n        }\\n    }\\n\\n    function _stablePriceToIndex(\\n        uint256 a,\\n        uint256 d,\\n        uint256 price,\\n        bool roundingUp\\n    ) internal pure returns (uint16 index) {\\n        if (price < a || price >= a + d * (2**16)) {\\n            revert(\\\"INVALID_PRICE\\\");\\n        }\\n        index = uint16((price - a) / d);\\n        if (roundingUp && (price - a) % d > 0) {\\n            unchecked {\\n                if (index == type(uint16).max) {\\n                    revert(\\\"INVALID_PRICE\\\");\\n                }\\n                index += 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90d21a46c921335b8a123f743806ad97626ab29a71e0690e94ec0f1ebcd6d774\",\"license\":\"-\"},\"contracts/interfaces/CloberMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketFactory {\\n    /**\\n     * @notice Emitted when a new volatile market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     */\\n    event CreateVolatileMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    );\\n\\n    /**\\n     * @notice Emitted when a new stable market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     */\\n    event CreateStableMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    );\\n\\n    /**\\n     * @notice Emitted when the address of the owner has changed.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event ChangeOwner(address previousOwner, address newOwner);\\n\\n    /**\\n     * @notice Emitted when the DAO Treasury address has changed.\\n     * @param previousTreasury The address of the previous DAO Treasury.\\n     * @param newTreasury The address of the new DAO Treasury.\\n     */\\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\\n\\n    /**\\n     * @notice Emitted when the host address has changed.\\n     * @param market The address of the market that had a change of hosts.\\n     * @param previousHost The address of the previous host.\\n     * @param newHost The address of a new host.\\n     */\\n    event ChangeHost(address indexed market, address previousHost, address newHost);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedGeometricPriceBook(uint128 a, uint128 r) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedArithmeticPriceBook(uint128 a, uint128 d) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the MarketDeployer.\\n     * @return The address of the MarketDeployer.\\n     */\\n    function marketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the priceBookDeployer.\\n     * @return The address of the priceBookDeployer.\\n     */\\n    function priceBookDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the orderTokenDeployer.\\n     * @return The address of the orderTokenDeployer.\\n     */\\n    function orderTokenDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the OrderCanceler.\\n     * @return The address of the OrderCanceler.\\n     */\\n    function canceler() external view returns (address);\\n\\n    /**\\n     * @notice Returns whether the specified token address has been registered as a quote token.\\n     * @param token The address of the token to check.\\n     * @return bool Whether the token is registered as a quote token.\\n     */\\n    function registeredQuoteTokens(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address of the factory owner\\n     * @return The address of the factory owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the factory owner candidate\\n     * @return The address of the factory owner candidate\\n     */\\n    function futureOwner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO Treasury\\n     * @return The address of the DAO Treasury\\n     */\\n    function daoTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current nonce\\n     * @return The current nonce\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new market with a VolatilePriceBook.\\n     * @param host The address of the new market's host.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     * @return The address of the created market.\\n     */\\n    function createVolatileMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Creates a new market with a StablePriceBook\\n     * @param host The address of the new market's host\\n     * @param quoteToken The address of the new market's quote token\\n     * @param baseToken The address of the new market's base token\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     * @return The address of the created market.\\n     */\\n    function createStableMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Change the DAO Treasury address.\\n     * @dev Only the factory owner can call this function.\\n     * @param treasury The new address of the DAO Treasury.\\n     */\\n    function changeDaoTreasury(address treasury) external;\\n\\n    /**\\n     * @notice Sets the new owner address for this contract.\\n     * @dev Only the factory owner can call this function.\\n     * @param newOwner The new owner address for this contract.\\n     */\\n    function prepareChangeOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\\n     * @dev Only the future owner can call this function.\\n     */\\n    function executeChangeOwner() external;\\n\\n    /**\\n     * @notice Returns the host address of the given market.\\n     * @param market The address of the target market.\\n     * @return The host address of the market.\\n     */\\n    function getMarketHost(address market) external view returns (address);\\n\\n    /**\\n     * @notice Prepares to set a new host address for the given market address.\\n     * @dev Only the market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     * @param newHost The new host address for the given market.\\n     */\\n    function prepareHandOverHost(address market, address newHost) external;\\n\\n    /**\\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\\n     * @dev Only the future market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     */\\n    function executeHandOverHost(address market) external;\\n\\n    enum MarketType {\\n        NONE,\\n        VOLATILE,\\n        STABLE\\n    }\\n\\n    /**\\n     * @notice MarketInfo struct that contains information about a market.\\n     * @param host The address of the market host.\\n     * @param marketType The market type, either VOLATILE or STABLE.\\n     * @param a The starting price point.\\n     * @param factor The either the common ratio or common difference between price points.\\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\\n     */\\n    struct MarketInfo {\\n        address host;\\n        MarketType marketType;\\n        uint128 a;\\n        uint128 factor;\\n        address futureHost;\\n    }\\n\\n    /**\\n     * @notice Returns key information about the market.\\n     * @param market The address of the market.\\n     * @return marketInfo The MarketInfo structure of the given market.\\n     */\\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\\n\\n    /**\\n     * @notice Allows the specified token to be used as the quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to register.\\n     */\\n    function registerQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Revokes the token's right to be used as a quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to unregister.\\n     */\\n    function unregisterQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Returns the order token name.\\n     * @param quoteToken The address of the market's quote token.\\n     * @param baseToken The address of the market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token name.\\n     */\\n    function formatOrderTokenName(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the order token symbol.\\n     * @param quoteToken The address of a new market's quote token.\\n     * @param baseToken The address of a new market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token symbol.\\n     */\\n    function formatOrderTokenSymbol(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ac42d72d2376f46eeb928280b3fefe5322c6c5c1428aa06d25e539e35cda13a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/CloberMarketFactoryV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketFactoryV1 {\\n    /**\\n     * @notice Emitted when a new volatile market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     */\\n    event CreateVolatileMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    );\\n\\n    /**\\n     * @notice Emitted when a new stable market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     */\\n    event CreateStableMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    );\\n\\n    /**\\n     * @notice Emitted when the address of the owner has changed.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event ChangeOwner(address previousOwner, address newOwner);\\n\\n    /**\\n     * @notice Emitted when the DAO Treasury address has changed.\\n     * @param previousTreasury The address of the previous DAO Treasury.\\n     * @param newTreasury The address of the new DAO Treasury.\\n     */\\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\\n\\n    /**\\n     * @notice Emitted when the host address has changed.\\n     * @param market The address of the market that had a change of hosts.\\n     * @param previousHost The address of the previous host.\\n     * @param newHost The address of a new host.\\n     */\\n    event ChangeHost(address indexed market, address previousHost, address newHost);\\n\\n    /**\\n     * @notice Returns the address of the VolatileMarketDeployer.\\n     * @return The address of the VolatileMarketDeployer.\\n     */\\n    function volatileMarketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the StableMarketDeployer.\\n     * @return The address of the StableMarketDeployer.\\n     */\\n    function stableMarketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the OrderCanceler.\\n     * @return The address of the OrderCanceler.\\n     */\\n    function canceler() external view returns (address);\\n\\n    /**\\n     * @notice Returns whether the specified token address has been registered as a quote token.\\n     * @param token The address of the token to check.\\n     * @return bool Whether the token is registered as a quote token.\\n     */\\n    function registeredQuoteTokens(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address of the factory owner\\n     * @return The address of the factory owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the factory owner candidate\\n     * @return The address of the factory owner candidate\\n     */\\n    function futureOwner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO Treasury\\n     * @return The address of the DAO Treasury\\n     */\\n    function daoTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current nonce\\n     * @return The current nonce\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new market with a VolatilePriceBook.\\n     * @param host The address of the new market's host.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     * @return The address of the created market.\\n     */\\n    function createVolatileMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Creates a new market with a StablePriceBook\\n     * @param host The address of the new market's host\\n     * @param quoteToken The address of the new market's quote token\\n     * @param baseToken The address of the new market's base token\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     * @return The address of the created market.\\n     */\\n    function createStableMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Change the DAO Treasury address.\\n     * @dev Only the factory owner can call this function.\\n     * @param treasury The new address of the DAO Treasury.\\n     */\\n    function changeDaoTreasury(address treasury) external;\\n\\n    /**\\n     * @notice Sets the new owner address for this contract.\\n     * @dev Only the factory owner can call this function.\\n     * @param newOwner The new owner address for this contract.\\n     */\\n    function prepareChangeOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\\n     * @dev Only the future owner can call this function.\\n     */\\n    function executeChangeOwner() external;\\n\\n    /**\\n     * @notice Returns the host address of the given market.\\n     * @param market The address of the target market.\\n     * @return The host address of the market.\\n     */\\n    function getMarketHost(address market) external view returns (address);\\n\\n    /**\\n     * @notice Prepares to set a new host address for the given market address.\\n     * @dev Only the market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     * @param newHost The new host address for the given market.\\n     */\\n    function prepareHandOverHost(address market, address newHost) external;\\n\\n    /**\\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\\n     * @dev Only the future market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     */\\n    function executeHandOverHost(address market) external;\\n\\n    /**\\n     * @notice Computes the OrderNFT contract address.\\n     * @param marketNonce The nonce to compute the OrderNFT contract address via CREATE2.\\n     */\\n    function computeTokenAddress(uint256 marketNonce) external view returns (address);\\n\\n    enum MarketType {\\n        NONE,\\n        VOLATILE,\\n        STABLE\\n    }\\n\\n    /**\\n     * @notice MarketInfo struct that contains information about a market.\\n     * @param host The address of the market host.\\n     * @param marketType The market type, either VOLATILE or STABLE.\\n     * @param a The starting price point.\\n     * @param factor The either the common ratio or common difference between price points.\\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\\n     */\\n    struct MarketInfo {\\n        address host;\\n        MarketType marketType;\\n        uint128 a;\\n        uint128 factor;\\n        address futureHost;\\n    }\\n\\n    /**\\n     * @notice Returns key information about the market.\\n     * @param market The address of the market.\\n     * @return marketInfo The MarketInfo structure of the given market.\\n     */\\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\\n\\n    /**\\n     * @notice Allows the specified token to be used as the quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to register.\\n     */\\n    function registerQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Revokes the token's right to be used as a quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to unregister.\\n     */\\n    function unregisterQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Returns the order token name.\\n     * @param quoteToken The address of the market's quote token.\\n     * @param baseToken The address of the market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token name.\\n     */\\n    function formatOrderTokenName(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the order token symbol.\\n     * @param quoteToken The address of a new market's quote token.\\n     * @param baseToken The address of a new market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token symbol.\\n     */\\n    function formatOrderTokenSymbol(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xbab570b08fb0f47ae49e830d68ec020dc1a507f266f47635cfe9b1ace055534c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/CloberOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderBook {\\n    /**\\n     * @notice Emitted when an order is created.\\n     * @param sender The address who sent the tokens to make the order.\\n     * @param user The address with the rights to claim the proceeds of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param options LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event MakeOrder(\\n        address indexed sender,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint32 claimBounty,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        uint8 options\\n    );\\n\\n    /**\\n     * @notice Emitted when an order takes from the order book.\\n     * @param sender The address who sent the tokens to take the order.\\n     * @param user The recipient address of the traded token.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The ordered raw amount.\\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\\n\\n    /**\\n     * @notice Emitted when an order is canceled.\\n     * @param user The owner of the order.\\n     * @param rawAmount The raw amount remaining that was canceled.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\\n     */\\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\\n\\n    /**\\n     * @notice Emitted when the proceeds of an order is claimed.\\n     * @param claimer The address that initiated the claim.\\n     * @param user The owner of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param bountyAmount The size of the claim bounty.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\\n     */\\n    event ClaimOrder(\\n        address indexed claimer,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint256 bountyAmount,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        bool isBase\\n    );\\n\\n    /**\\n     * @notice Emitted when a flash-loan is taken.\\n     * @param caller The caller address of the flash-loan.\\n     * @param borrower The address of the flash loan token receiver.\\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\\n     * @param baseAmount The amount of base tokens the user has borrowed.\\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\\n     */\\n    event Flash(\\n        address indexed caller,\\n        address indexed borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        uint256 earnedQuote,\\n        uint256 earnedBase\\n    );\\n\\n    /**\\n     * @notice A struct that represents an order.\\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\\n     * @param owner The address of the order owner.\\n     */\\n    struct Order {\\n        uint64 amount;\\n        uint32 claimBounty;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice A struct that represents a block trade log.\\n     * @param blockTime The timestamp of the block.\\n     * @param askVolume The volume taken on the ask side.\\n     * @param bidVolume The volume taken on the bid side.\\n     * @param open The price book index on the open.\\n     * @param high The highest price book index in the block.\\n     * @param low The lowest price book index in the block.\\n     * @param close The price book index on the close.\\n     */\\n    struct BlockTradeLog {\\n        uint64 blockTime;\\n        uint64 askVolume;\\n        uint64 bidVolume;\\n        uint16 open;\\n        uint16 high;\\n        uint16 low;\\n        uint16 close;\\n    }\\n\\n    /**\\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\\n     * @dev `msg.value` will be used as the claimBounty.\\n     * @param user The taker/maker address.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\\n     * @param baseAmount The base token amount to trade, utilized by asks.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\\n     * @param data Custom callback data\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitOrder(\\n        address user,\\n        uint16 priceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Returns the expected input amount and output amount.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * Bid & expendInput => Used as input amount.\\n     * Bid & !expendInput => Not used.\\n     * Ask & expendInput => Not used.\\n     * Ask & !expendInput => Used as output amount.\\n     * @param baseAmount The base token amount to trade.\\n     * Bid & expendInput => Not used.\\n     * Bid & !expendInput => Used as output amount.\\n     * Ask & expendInput => Used as input amount.\\n     * Ask & !expendInput => Not used.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     */\\n    function getExpectedAmount(\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Take opens orders until certain conditions are met.\\n     * @param user The taker address.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\\n     * @param baseAmount The base token amount to trade.\\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     * @param data Custom callback data.\\n     */\\n    function marketOrder(\\n        address user,\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Cancel orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param receiver The address to receive canceled tokens.\\n     * @param orderKeys The order keys of the orders to cancel.\\n     */\\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Claim the proceeds of orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param claimer The address to receive the claim bounties.\\n     * @param orderKeys The order keys of the orders to claim.\\n     */\\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Get the claimable proceeds of an order.\\n     * @param orderKey The order key of the order.\\n     * @return claimableRawAmount The claimable raw amount.\\n     * @return claimableAmount The claimable amount after fees.\\n     * @return feeAmount The maker fee to be paid on claim.\\n     * @return rebateAmount The rebate to be received on claim.\\n     */\\n    function getClaimable(OrderKey calldata orderKey)\\n        external\\n        view\\n        returns (\\n            uint64 claimableRawAmount,\\n            uint256 claimableAmount,\\n            uint256 feeAmount,\\n            uint256 rebateAmount\\n        );\\n\\n    /**\\n     * @notice Flash loan the tokens in the OrderBook.\\n     * @param borrower The address to receive the loan.\\n     * @param quoteAmount The quote token amount to borrow.\\n     * @param baseAmount The base token amount to borrow.\\n     * @param data The user's custom callback data.\\n     */\\n    function flash(\\n        address borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Returns the quote unit amount.\\n     * @return The amount that one raw amount represent in quote tokens.\\n     */\\n    function quoteUnit() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The maker fee. 100 = 1bp.\\n     */\\n    function makerFee() external view returns (int24);\\n\\n    /**\\n     * @notice Returns the take fee\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The taker fee. 100 = 1bps.\\n     */\\n    function takerFee() external view returns (uint24);\\n\\n    /**\\n     * @notice Returns the address of the order NFT contract.\\n     * @return The address of the order NFT contract.\\n     */\\n    function orderToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the quote token.\\n     * @return The address of the quote token.\\n     */\\n    function quoteToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the base token.\\n     * @return The address of the base token.\\n     */\\n    function baseToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current total open amount at the given price.\\n     * @param isBid The flag to choose which side to check the depth for.\\n     * @param priceIndex The price book index.\\n     * @return The total open amount.\\n     */\\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the fee balance that has not been collected yet.\\n     * @return quote The current fee balance for the quote token.\\n     * @return base The current fee balance for the base token.\\n     */\\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the host.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the host.\\n     */\\n    function uncollectedHostFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the dao treasury.\\n     */\\n    function uncollectedProtocolFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether the order book is empty or not.\\n     * @param isBid The flag to choose which side to check the emptiness of.\\n     * @return Whether the order book is empty or not on that side.\\n     */\\n    function isEmpty(bool isBid) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the order information.\\n     * @param orderKey The order key of the order.\\n     * @return The order struct of the given order key.\\n     */\\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\\n\\n    /**\\n     * @notice Returns the lowest ask price index or the highest bid price index.\\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\\n     * @return The current price index. If the order book is empty, it will revert.\\n     */\\n    function bestPriceIndex(bool isBid) external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the current block trade log index.\\n     * @return The current block trade log index.\\n     */\\n    function blockTradeLogIndex() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the block trade log for a certain index.\\n     * @param index The block trade log index used to query the block trade log.\\n     * @return The queried block trade log.\\n     */\\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\\n     * @param rawAmount The raw amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted base amount.\\n     */\\n    function rawToBase(\\n        uint64 rawAmount,\\n        uint16 priceIndex,\\n        bool roundingUp\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding quote amount.\\n     * @param rawAmount The raw amount to be converted.\\n     * @return The converted quote amount.\\n     */\\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\\n     * @param baseAmount The base amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function baseToRaw(\\n        uint256 baseAmount,\\n        uint16 priceIndex,\\n        bool roundingUp\\n    ) external view returns (uint64);\\n\\n    /**\\n     * @notice Converts a quote amount to its corresponding raw amount.\\n     * @param quoteAmount The quote amount to be converted.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Collects fees for either the protocol or host.\\n     * @param token The token address to collect. It should be the quote token or the base token.\\n     * @param destination The destination address to transfer fees.\\n     * It should be the dao treasury address or the host address.\\n     */\\n    function collectFees(address token, address destination) external;\\n\\n    /**\\n     * @notice Change the owner of the order.\\n     * @dev Only the OrderToken contract can call this function.\\n     * @param orderKey The order key of the order.\\n     * @param newOwner The new owner address.\\n     */\\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\\n\\n    /**\\n     * @notice Converts the price index into the actual price.\\n     * @param priceIndex The price book index.\\n     * @return price The actual price.\\n     */\\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the price book index closest to the provided price.\\n     * @param price Provided price.\\n     * @param roundingUp Determines whether to round up or down.\\n     * @return index The price book index.\\n     * @return correctedPrice The actual price for the price book index.\\n     */\\n    function priceToIndex(uint256 price, bool roundingUp) external view returns (uint16 index, uint256 correctedPrice);\\n}\\n\",\"keccak256\":\"0x685307eeb5b1595537b45d22ff764360c40549d922e368534997098ec98c9c7a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/CloberOrderKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A struct that represents a unique key for an order.\\n * @param isBid The flag indicating whether it's a bid order or an ask order.\\n * @param priceIndex The price book index.\\n * @param orderIndex The order index.\\n */\\nstruct OrderKey {\\n    bool isBid;\\n    uint16 priceIndex;\\n    uint256 orderIndex;\\n}\\n\",\"keccak256\":\"0x4607151f9e9e7732f5e40c9f899fb4adb35dcee23056312be90976bb979264b4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/CloberOrderNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderNFT is IERC721, IERC721Metadata {\\n    /**\\n     * @notice Returns the base URI for the metadata of this NFT collection.\\n     * @return The base URI for the metadata of this NFT collection.\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI for the metadata of this NFT collection.\\n     * @return The contract URI for the metadata of this NFT collection.\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the address of the market contract that manages this token.\\n     * @return The address of the market contract that manages this token.\\n     */\\n    function market() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of contract owner.\\n     * @return The address of the contract owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Called when a new token is minted.\\n     * @param to The receiver address of the minted token.\\n     * @param tokenId The id of the token minted.\\n     */\\n    function onMint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Called when a token is burned.\\n     * @param tokenId The id of the token burned.\\n     */\\n    function onBurn(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Changes the base URI for the metadata of this NFT collection.\\n     * @param newBaseURI The new base URI for the metadata of this NFT collection.\\n     */\\n    function changeBaseURI(string memory newBaseURI) external;\\n\\n    /**\\n     * @notice Changes the contract URI for the metadata of this NFT collection.\\n     * @param newContractURI The new contract URI for the metadata of this NFT collection.\\n     */\\n    function changeContractURI(string memory newContractURI) external;\\n\\n    /**\\n     * @notice Decodes a token id into an order key.\\n     * @param id The id to decode.\\n     * @return The order key corresponding to the given id.\\n     */\\n    function decodeId(uint256 id) external pure returns (OrderKey memory);\\n\\n    /**\\n     * @notice Encodes an order key to a token id.\\n     * @param orderKey The order key to encode.\\n     * @return The id corresponding to the given order key.\\n     */\\n    function encodeId(OrderKey memory orderKey) external pure returns (uint256);\\n\\n    /**\\n     * @notice Cancels orders with token ids.\\n     * @dev Only the OrderCanceler can call this function.\\n     * @param from The address of the owner of the tokens.\\n     * @param tokenIds The ids of the tokens to cancel.\\n     * @param receiver The address to send the underlying assets to.\\n     */\\n    function cancel(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        address receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb62220c7d230325124b11ad9a30283be9134fa63aa3308425eef1ab664b67b79\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/CloberOrderNFTDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberOrderNFTDeployer {\\n    /**\\n     * @notice Deploys the OrderNFT contract.\\n     * @param salt The salt to compute the OrderNFT contract address via CREATE2.\\n     */\\n    function deploy(bytes32 salt) external returns (address);\\n\\n    /**\\n     * @notice Computes the OrderNFT contract address.\\n     * @param salt The salt to compute the OrderNFT contract address via CREATE2.\\n     */\\n    function computeTokenAddress(bytes32 salt) external view returns (address);\\n}\\n\",\"keccak256\":\"0x98087f1eca69909c649cff3933463bf0ce375f76010cd0468caa0023f394f8f7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/CloberPriceBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberPriceBook {\\n    /**\\n     * @notice Returns the biggest price book index supported.\\n     * @return The biggest price book index supported.\\n     */\\n    function maxPriceIndex() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the upper bound of prices supported.\\n     * @dev The price upper bound can be greater than `indexToPrice(maxPriceIndex())`.\\n     * @return The the upper bound of prices supported.\\n     */\\n    function priceUpperBound() external view returns (uint256);\\n\\n    /**\\n     * @notice Converts the price index into the actual price.\\n     * @param priceIndex The price book index.\\n     * @return price The actual price.\\n     */\\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the price book index closest to the provided price.\\n     * @param price Provided price.\\n     * @param roundingUp Determines whether to round up or down.\\n     * @return index The price book index.\\n     * @return correctedPrice The actual price for the price book index.\\n     */\\n    function priceToIndex(uint256 price, bool roundingUp) external view returns (uint16 index, uint256 correctedPrice);\\n}\\n\",\"keccak256\":\"0xaed8d34c2e1283f0c8694b3727b8357d46c0463cc8a3d5c2ebcf1f1fb98a6bdf\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806382abaa511161005057806382abaa51146100cf578063b0772d0b146100e2578063b9728219146100f757600080fd5b80630f2ca8921461006c5780637242ec1d14610095575b600080fd5b61007f61007a366004611683565b61012c565b60405161008c91906116dd565b60405180910390f35b6100bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff909116815260200161008c565b61007f6100dd366004611741565b6104b3565b6100ea610750565b60405161008c9190611785565b61011e7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161008c565b606061013883836117e8565b61014390600161180a565b61ffff1667ffffffffffffffff81111561015f5761015f611825565b6040519080825280602002602001820160405280156101bb57816020015b6101a86040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020019060019003908161017d5790505b509050825b8261ffff168161ffff16116104aa576040517fffd3ca8f000000000000000000000000000000000000000000000000000000008152851515600482015261ffff828116602483015285830316906000906001600160a01b0389169063ffd3ca8f90604401602060405180830381865afa158015610241573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610265919061183b565b6040517f6a204d0c00000000000000000000000000000000000000000000000000000000815261ffff851660048201529091506001600160a01b03891690636a204d0c90602401602060405180830381865afa1580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed919061186c565b8483815181106102ff576102ff611885565b602002602001015160000181815250508261ffff1684838151811061032657610326611885565b60209081029190910181015101526040517f240ddd2e00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff821660048201526001600160a01b0389169063240ddd2e90602401602060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf919061186c565b8483815181106103d1576103d1611885565b6020908102919091010151604090810191909152517fc7c6414200000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8216600482015261ffff84166024820152600060448201526001600160a01b0389169063c7c6414290606401602060405180830381865afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f919061186c565b84838151811061049157610491611885565b60209081029190910101516060015250506001016101c0565b50949350505050565b6040517f0cf85bcc0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152606091600091829182917f00000000000000000000000000000000000000000000000000000000000000001690630cf85bcc9060240160a060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056091906118bd565b905060008160200151600281111561057a5761057a611961565b036106695760405163523fdc7160e01b815260048101879052600160248201526001600160a01b0389169063523fdc71906044016040805180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190611977565b5060405163523fdc7160e01b815260048101879052600060248201529093506001600160a01b0389169063523fdc71906044016040805180830381865afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106619190611977565b509150610736565b60018160200151600281111561068157610681611961565b036106e35760408101516001600160801b03166402540be4001480156106bb575060608101516001600160801b0316670de444324c2a8000145b6106c457600080fd5b6106cf866001610b86565b92506106dc856000610b86565b9150610736565b61070a81604001516001600160801b031682606001516001600160801b0316886001611555565b925061073381604001516001600160801b031682606001516001600160801b0316876000611555565b91505b6107428888858561012c565b93505050505b949350505050565b606060007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663affed0e06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f7919061186c565b61080191906119a5565b90508067ffffffffffffffff81111561081c5761081c611825565b604051908082528060200260200182016040528015610845578160200160208202803683370190505b50915060005b7f00000000000000000000000000000000000000000000000000000000000000008110156109a8576040517f5b0d2f27000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635b0d2f2790602401602060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091591906119be565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097691906119be565b83828151811061098857610988611885565b6001600160a01b039092166020928302919091019091015260010161084b565b507f00000000000000000000000000000000000000000000000000000000000000005b81811015610b815760007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008303604051602001610a33929190918252602082015260400190565b60408051808303601f190181529082905280516020909101207f67432cc50000000000000000000000000000000000000000000000000000000082526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906367432cc590602401602060405180830381865afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906119be565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4e91906119be565b848381518110610b6057610b60611885565b6001600160a01b0390921660209283029190910190910152506001016109cb565b505090565b60007f0000000000000000000000000000000000000000000000000000000000000000831080610bd657507f00000000000000000000000000000000000000000000000000000000000000008310155b15610c185760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f505249434560981b60448201526064015b60405180910390fd5b5060007f0000000000000000000000000000000000000000000000000000000000000000816040610c4a8660016119a5565b901b90506180007f000000000000000000000000000000000000000000000000000000000000000061ffff16118015610ca45750817f00000000000000000000000000000000000000000000000000000000000000000281115b15610cda578261800017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b6140007f000000000000000000000000000000000000000000000000000000000000000061ffff16118015610d305750817f00000000000000000000000000000000000000000000000000000000000000000281115b15610d66578261400017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b6120007f000000000000000000000000000000000000000000000000000000000000000061ffff16118015610dbc5750817f00000000000000000000000000000000000000000000000000000000000000000281115b15610df2578261200017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b6110007f000000000000000000000000000000000000000000000000000000000000000061ffff16118015610e485750817f00000000000000000000000000000000000000000000000000000000000000000281115b15610e7e578261100017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b6108007f000000000000000000000000000000000000000000000000000000000000000061ffff16118015610ed45750817f00000000000000000000000000000000000000000000000000000000000000000281115b15610f0a578261080017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b6104007f000000000000000000000000000000000000000000000000000000000000000061ffff16118015610f605750817f00000000000000000000000000000000000000000000000000000000000000000281115b15610f96578261040017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b6102007f000000000000000000000000000000000000000000000000000000000000000061ffff16118015610fec5750817f00000000000000000000000000000000000000000000000000000000000000000281115b15611022578261020017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b6101007f000000000000000000000000000000000000000000000000000000000000000061ffff161180156110785750817f00000000000000000000000000000000000000000000000000000000000000000281115b156110ae578261010017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b60807f000000000000000000000000000000000000000000000000000000000000000061ffff161180156111035750817f00000000000000000000000000000000000000000000000000000000000000000281115b156111385782608017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b60407f000000000000000000000000000000000000000000000000000000000000000061ffff1611801561118d5750817f00000000000000000000000000000000000000000000000000000000000000000281115b156111c25782604017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b60207f000000000000000000000000000000000000000000000000000000000000000061ffff161180156112175750817f00000000000000000000000000000000000000000000000000000000000000000281115b1561124c5782602017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b60107f000000000000000000000000000000000000000000000000000000000000000061ffff161180156112a15750817f00000000000000000000000000000000000000000000000000000000000000000281115b156112d65782601017925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b60087f000000000000000000000000000000000000000000000000000000000000000061ffff1611801561132b5750817f00000000000000000000000000000000000000000000000000000000000000000281115b156113605782600817925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b60047f000000000000000000000000000000000000000000000000000000000000000061ffff161180156113b55750817f00000000000000000000000000000000000000000000000000000000000000000281115b156113ea5782600417925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b60027f000000000000000000000000000000000000000000000000000000000000000061ffff1611801561143f5750817f00000000000000000000000000000000000000000000000000000000000000000281115b156114745782600217925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b817f0000000000000000000000000000000000000000000000000000000000000000028111156114ce5782600117925060407f00000000000000000000000000000000000000000000000000000000000000008302901c91505b8380156114da57508482105b1561154d577f000000000000000000000000000000000000000000000000000000000000000061ffff168361ffff16106115465760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f505249434560981b6044820152606401610c0f565b6001830192505b505092915050565b60008483108061157b575061156d84620100006119db565b61157790866119a5565b8310155b156115b85760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f505249434560981b6044820152606401610c0f565b836115c386856119f2565b6115cd9190611a1b565b90508180156115f057506000846115e487866119f2565b6115ee9190611a2f565b115b156107485761fffe1961ffff82160161163b5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f505249434560981b6044820152606401610c0f565b600101949350505050565b6001600160a01b038116811461165b57600080fd5b50565b8035801515811461166e57600080fd5b919050565b61ffff8116811461165b57600080fd5b6000806000806080858703121561169957600080fd5b84356116a481611646565b93506116b26020860161165e565b925060408501356116c281611673565b915060608501356116d281611673565b939692955090935050565b602080825282518282018190526000919060409081850190868401855b82811015611734578151805185528681015187860152858101518686015260609081015190850152608090930192908501906001016116fa565b5091979650505050505050565b6000806000806080858703121561175757600080fd5b843561176281611646565b93506117706020860161165e565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b818110156117c65783516001600160a01b0316835292840192918401916001016117a1565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b61ffff828116828216039080821115611803576118036117d2565b5092915050565b61ffff818116838216019080821115611803576118036117d2565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561184d57600080fd5b815167ffffffffffffffff8116811461186557600080fd5b9392505050565b60006020828403121561187e57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b805161166e81611646565b80516001600160801b038116811461166e57600080fd5b600060a082840312156118cf57600080fd5b60405160a0810181811067ffffffffffffffff8211171561190057634e487b7160e01b600052604160045260246000fd5b604052825161190e81611646565b815260208301516003811061192257600080fd5b6020820152611933604084016118a6565b6040820152611944606084016118a6565b60608201526119556080840161189b565b60808201529392505050565b634e487b7160e01b600052602160045260246000fd5b6000806040838503121561198a57600080fd5b825161199581611673565b6020939093015192949293505050565b808201808211156119b8576119b86117d2565b92915050565b6000602082840312156119d057600080fd5b815161186581611646565b80820281158282048414176119b8576119b86117d2565b818103818111156119b8576119b86117d2565b634e487b7160e01b600052601260045260246000fd5b600082611a2a57611a2a611a05565b500490565b600082611a3e57611a3e611a05565b50069056fea26469706673582212201225622ebd2d52442b8612aaf1f3f2bda5d0b4756fc9a8310599cb1642de491b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}